//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CheckersClient.ServiceSynchroCheckers {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceSynchroCheckers.IServiceSynchroCheckers")]
    public interface IServiceSynchroCheckers {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/GetUserByIdUser", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/GetUserByIdUserResponse")]
        ServiceSynchroCheckers.User GetUserByIdUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/GetUserByIdUser", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/GetUserByIdUserResponse")]
        System.Threading.Tasks.Task<ServiceSynchroCheckers.User> GetUserByIdUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/AddUser", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/AddUserResponse")]
        bool AddUser(ServiceSynchroCheckers.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/AddUser", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/AddUserResponse")]
        System.Threading.Tasks.Task<bool> AddUserAsync(ServiceSynchroCheckers.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/UpdateUser", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/UpdateUserResponse")]
        bool UpdateUser(ServiceSynchroCheckers.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/UpdateUser", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(ServiceSynchroCheckers.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/DeleteUser", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/DeleteUserResponse")]
        bool DeleteUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/DeleteUser", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/GetUsersAvailable", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/GetUsersAvailableResponse")]
        ServiceSynchroCheckers.User[] GetUsersAvailable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/GetUsersAvailable", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/GetUsersAvailableResponse")]
        System.Threading.Tasks.Task<ServiceSynchroCheckers.User[]> GetUsersAvailableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/UpdateAvailabilityUser", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/UpdateAvailabilityUserResponse")]
        bool UpdateAvailabilityUser(int id, bool is_available);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/UpdateAvailabilityUser", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/UpdateAvailabilityUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateAvailabilityUserAsync(int id, bool is_available);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/GetGameByIdGame", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/GetGameByIdGameResponse")]
        ServiceSynchroCheckers.Class.Game GetGameByIdGame(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/GetGameByIdGame", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/GetGameByIdGameResponse")]
        System.Threading.Tasks.Task<ServiceSynchroCheckers.Class.Game> GetGameByIdGameAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/AddGame", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/AddGameResponse")]
        bool AddGame(ServiceSynchroCheckers.Class.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/AddGame", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/AddGameResponse")]
        System.Threading.Tasks.Task<bool> AddGameAsync(ServiceSynchroCheckers.Class.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/UpdateGame", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/UpdateGameResponse")]
        bool UpdateGame(ServiceSynchroCheckers.Class.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/UpdateGame", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/UpdateGameResponse")]
        System.Threading.Tasks.Task<bool> UpdateGameAsync(ServiceSynchroCheckers.Class.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/DeleteGame", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/DeleteGameResponse")]
        bool DeleteGame(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/DeleteGame", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/DeleteGameResponse")]
        System.Threading.Tasks.Task<bool> DeleteGameAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/GetRoleByIdRole", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/GetRoleByIdRoleResponse")]
        ServiceSynchroCheckers.Class.Role GetRoleByIdRole(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/GetRoleByIdRole", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/GetRoleByIdRoleResponse")]
        System.Threading.Tasks.Task<ServiceSynchroCheckers.Class.Role> GetRoleByIdRoleAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/AddRole", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/AddRoleResponse")]
        bool AddRole(ServiceSynchroCheckers.Class.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/AddRole", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/AddRoleResponse")]
        System.Threading.Tasks.Task<bool> AddRoleAsync(ServiceSynchroCheckers.Class.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/UpdateRole", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/UpdateRoleResponse")]
        bool UpdateRole(ServiceSynchroCheckers.Class.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/UpdateRole", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/UpdateRoleResponse")]
        System.Threading.Tasks.Task<bool> UpdateRoleAsync(ServiceSynchroCheckers.Class.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/DeleteRole", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/DeleteRoleResponse")]
        bool DeleteRole(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/DeleteRole", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/DeleteRoleResponse")]
        System.Threading.Tasks.Task<bool> DeleteRoleAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/GetGameUserByIdGameUser", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/GetGameUserByIdGameUserResponse")]
        ServiceSynchroCheckers.Class.GameUser GetGameUserByIdGameUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/GetGameUserByIdGameUser", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/GetGameUserByIdGameUserResponse")]
        System.Threading.Tasks.Task<ServiceSynchroCheckers.Class.GameUser> GetGameUserByIdGameUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/AddGameUser", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/AddGameUserResponse")]
        bool AddGameUser(ServiceSynchroCheckers.Class.GameUser gameUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/AddGameUser", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/AddGameUserResponse")]
        System.Threading.Tasks.Task<bool> AddGameUserAsync(ServiceSynchroCheckers.Class.GameUser gameUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/UpdateGameUser", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/UpdateGameUserResponse")]
        bool UpdateGameUser(ServiceSynchroCheckers.Class.GameUser gameUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/UpdateGameUser", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/UpdateGameUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateGameUserAsync(ServiceSynchroCheckers.Class.GameUser gameUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/DeleteGameUser", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/DeleteGameUserResponse")]
        bool DeleteGameUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/DeleteGameUser", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/DeleteGameUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteGameUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/GetPieceByIdPiece", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/GetPieceByIdPieceResponse")]
        ServiceSynchroCheckers.Class.Piece GetPieceByIdPiece(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/GetPieceByIdPiece", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/GetPieceByIdPieceResponse")]
        System.Threading.Tasks.Task<ServiceSynchroCheckers.Class.Piece> GetPieceByIdPieceAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/AddPiece", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/AddPieceResponse")]
        bool AddPiece(ServiceSynchroCheckers.Class.Piece piece);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/AddPiece", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/AddPieceResponse")]
        System.Threading.Tasks.Task<bool> AddPieceAsync(ServiceSynchroCheckers.Class.Piece piece);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/UpdatePiece", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/UpdatePieceResponse")]
        bool UpdatePiece(ServiceSynchroCheckers.Class.Piece piece);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/UpdatePiece", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/UpdatePieceResponse")]
        System.Threading.Tasks.Task<bool> UpdatePieceAsync(ServiceSynchroCheckers.Class.Piece piece);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/DeletePiece", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/DeletePieceResponse")]
        bool DeletePiece(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSynchroCheckers/DeletePiece", ReplyAction="http://tempuri.org/IServiceSynchroCheckers/DeletePieceResponse")]
        System.Threading.Tasks.Task<bool> DeletePieceAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceSynchroCheckersChannel : CheckersClient.ServiceSynchroCheckers.IServiceSynchroCheckers, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceSynchroCheckersClient : System.ServiceModel.ClientBase<CheckersClient.ServiceSynchroCheckers.IServiceSynchroCheckers>, CheckersClient.ServiceSynchroCheckers.IServiceSynchroCheckers {
        
        public ServiceSynchroCheckersClient() {
        }
        
        public ServiceSynchroCheckersClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceSynchroCheckersClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceSynchroCheckersClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceSynchroCheckersClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ServiceSynchroCheckers.User GetUserByIdUser(int id) {
            return base.Channel.GetUserByIdUser(id);
        }
        
        public System.Threading.Tasks.Task<ServiceSynchroCheckers.User> GetUserByIdUserAsync(int id) {
            return base.Channel.GetUserByIdUserAsync(id);
        }
        
        public bool AddUser(ServiceSynchroCheckers.User user) {
            return base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserAsync(ServiceSynchroCheckers.User user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public bool UpdateUser(ServiceSynchroCheckers.User user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(ServiceSynchroCheckers.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public bool DeleteUser(int id) {
            return base.Channel.DeleteUser(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(int id) {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public ServiceSynchroCheckers.User[] GetUsersAvailable() {
            return base.Channel.GetUsersAvailable();
        }
        
        public System.Threading.Tasks.Task<ServiceSynchroCheckers.User[]> GetUsersAvailableAsync() {
            return base.Channel.GetUsersAvailableAsync();
        }
        
        public bool UpdateAvailabilityUser(int id, bool is_available) {
            return base.Channel.UpdateAvailabilityUser(id, is_available);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAvailabilityUserAsync(int id, bool is_available) {
            return base.Channel.UpdateAvailabilityUserAsync(id, is_available);
        }
        
        public ServiceSynchroCheckers.Class.Game GetGameByIdGame(int id) {
            return base.Channel.GetGameByIdGame(id);
        }
        
        public System.Threading.Tasks.Task<ServiceSynchroCheckers.Class.Game> GetGameByIdGameAsync(int id) {
            return base.Channel.GetGameByIdGameAsync(id);
        }
        
        public bool AddGame(ServiceSynchroCheckers.Class.Game game) {
            return base.Channel.AddGame(game);
        }
        
        public System.Threading.Tasks.Task<bool> AddGameAsync(ServiceSynchroCheckers.Class.Game game) {
            return base.Channel.AddGameAsync(game);
        }
        
        public bool UpdateGame(ServiceSynchroCheckers.Class.Game game) {
            return base.Channel.UpdateGame(game);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateGameAsync(ServiceSynchroCheckers.Class.Game game) {
            return base.Channel.UpdateGameAsync(game);
        }
        
        public bool DeleteGame(int id) {
            return base.Channel.DeleteGame(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteGameAsync(int id) {
            return base.Channel.DeleteGameAsync(id);
        }
        
        public ServiceSynchroCheckers.Class.Role GetRoleByIdRole(int id) {
            return base.Channel.GetRoleByIdRole(id);
        }
        
        public System.Threading.Tasks.Task<ServiceSynchroCheckers.Class.Role> GetRoleByIdRoleAsync(int id) {
            return base.Channel.GetRoleByIdRoleAsync(id);
        }
        
        public bool AddRole(ServiceSynchroCheckers.Class.Role role) {
            return base.Channel.AddRole(role);
        }
        
        public System.Threading.Tasks.Task<bool> AddRoleAsync(ServiceSynchroCheckers.Class.Role role) {
            return base.Channel.AddRoleAsync(role);
        }
        
        public bool UpdateRole(ServiceSynchroCheckers.Class.Role role) {
            return base.Channel.UpdateRole(role);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRoleAsync(ServiceSynchroCheckers.Class.Role role) {
            return base.Channel.UpdateRoleAsync(role);
        }
        
        public bool DeleteRole(int id) {
            return base.Channel.DeleteRole(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRoleAsync(int id) {
            return base.Channel.DeleteRoleAsync(id);
        }
        
        public ServiceSynchroCheckers.Class.GameUser GetGameUserByIdGameUser(int id) {
            return base.Channel.GetGameUserByIdGameUser(id);
        }
        
        public System.Threading.Tasks.Task<ServiceSynchroCheckers.Class.GameUser> GetGameUserByIdGameUserAsync(int id) {
            return base.Channel.GetGameUserByIdGameUserAsync(id);
        }
        
        public bool AddGameUser(ServiceSynchroCheckers.Class.GameUser gameUser) {
            return base.Channel.AddGameUser(gameUser);
        }
        
        public System.Threading.Tasks.Task<bool> AddGameUserAsync(ServiceSynchroCheckers.Class.GameUser gameUser) {
            return base.Channel.AddGameUserAsync(gameUser);
        }
        
        public bool UpdateGameUser(ServiceSynchroCheckers.Class.GameUser gameUser) {
            return base.Channel.UpdateGameUser(gameUser);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateGameUserAsync(ServiceSynchroCheckers.Class.GameUser gameUser) {
            return base.Channel.UpdateGameUserAsync(gameUser);
        }
        
        public bool DeleteGameUser(int id) {
            return base.Channel.DeleteGameUser(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteGameUserAsync(int id) {
            return base.Channel.DeleteGameUserAsync(id);
        }
        
        public ServiceSynchroCheckers.Class.Piece GetPieceByIdPiece(int id) {
            return base.Channel.GetPieceByIdPiece(id);
        }
        
        public System.Threading.Tasks.Task<ServiceSynchroCheckers.Class.Piece> GetPieceByIdPieceAsync(int id) {
            return base.Channel.GetPieceByIdPieceAsync(id);
        }
        
        public bool AddPiece(ServiceSynchroCheckers.Class.Piece piece) {
            return base.Channel.AddPiece(piece);
        }
        
        public System.Threading.Tasks.Task<bool> AddPieceAsync(ServiceSynchroCheckers.Class.Piece piece) {
            return base.Channel.AddPieceAsync(piece);
        }
        
        public bool UpdatePiece(ServiceSynchroCheckers.Class.Piece piece) {
            return base.Channel.UpdatePiece(piece);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePieceAsync(ServiceSynchroCheckers.Class.Piece piece) {
            return base.Channel.UpdatePieceAsync(piece);
        }
        
        public bool DeletePiece(int id) {
            return base.Channel.DeletePiece(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePieceAsync(int id) {
            return base.Channel.DeletePieceAsync(id);
        }
    }
}
